const escuadrasPorChat = {};
const suplentesPorChat = {};

const handler = async (m, { conn, args, command }) => {
  // Validaci√≥n de argumentos
  if (args.length < 2) {
    conn.reply(m.chat, 'ùòãùò¶ùò£ùò¶ùò¥ ùò±ùò≥ùò∞ùò±ùò∞ùò≥ùò§ùò™ùò∞ùòØùò¢ùò≥ ùò≠ùò¢ ùò©ùò∞ùò≥ùò¢ (ùòèùòè:ùòîùòî) ùò∫ ùò¶ùò≠ ùò±ùò¢ùò™ÃÅùò¥ (ùòîùòü, ùòäùòñ, ùòäùòì, ùòàùòô).', m);
    return;
  }

  // Validar formato de hora
  const horaRegex = /^([01]\d|2[0-3]):?([0-5]\d)$/;
  if (!horaRegex.test(args[0])) {
    conn.reply(m.chat, 'ùòçùò∞ùò≥ùòÆùò¢ùòµùò∞ ùò•ùò¶ ùò©ùò∞ùò≥ùò¢ ùò™ùòØùò§ùò∞ùò≥ùò≥ùò¶ùò§ùòµùò∞. ùòãùò¶ùò£ùò¶ ùò¥ùò¶ùò≥ ùòèùòè:ùòîùòî ùò¶ùòØ ùòßùò∞ùò≥ùòÆùò¢ùòµùò∞ ùò•ùò¶ 24 ùò©ùò∞ùò≥ùò¢ùò¥.', m);
    return;
  }

  const horaUsuario = args[0];
  const pais = args[1].toUpperCase();

  const diferenciasHorarias = { MX: 0, CO: 1, CL: 2, AR: 3 };

  if (!(pais in diferenciasHorarias)) {
    conn.reply(m.chat, 'Pa√≠s no v√°lido. Usa MX para M√©xico, CO para Colombia, CL para Chile o AR para Argentina.', m);
    return;
  }

  const diferenciaHoraria = diferenciasHorarias[pais];
  const hora = parseInt(horaUsuario.split(':')[0], 10);
  const minutos = parseInt(horaUsuario.split(':')[1], 10);

  const horasEnPais = [];
  for (let i = 0; i < 4; i++) {
    const horaActual = new Date();
    horaActual.setHours(hora + i);
    horaActual.setMinutes(minutos);
    horaActual.setSeconds(0);
    horaActual.setMilliseconds(0);
    const horaEnPais = new Date(horaActual.getTime() - 3600000 * diferenciaHoraria);
    horasEnPais.push(horaEnPais);
  }

  const formatTime = (date) => date.toLocaleTimeString('es', { hour12: false, hour: '2-digit', minute: '2-digit' });
  const horaActual = formatTime(new Date());

  const message = `
*4 ùêïùêÑùêëùêíùêîùêí 4*

üá≤üáΩ ùêåùêÑùêóùêàùêÇùêé : ${formatTime(horasEnPais[0])}
üá®üá¥ ùêÇùêéùêãùêéùêåùêÅùêàùêÄ : ${formatTime(horasEnPais[1])}
üá®üá± ùêÇùêáùêàùêãùêÑ : ${formatTime(horasEnPais[2])}
üá¶üá∑ ùêÄùêëùêÜùêÑùêçùêìùêàùêçùêÄ : ${formatTime(horasEnPais[3])}

ùêáùêéùêëùêÄ ùêÄùêÇùêìùêîùêÄùêã ùêÑùêç ùêåùêÑùêóùêàùêÇùêéüá≤üáΩ : ${horaActual}

ùóòùó¶ùóñùó®ùóîùóóùó•ùóî

${(escuadrasPorChat[m.chat] || []).map(u => `üëë ‚îá @${u.split('@')[0]}`).join('\n') || '‚Äî'}

„Ö§ ö ùêíùêîùêèùêãùêÑùêçùêìùêÑ:

${(suplentesPorChat[m.chat] || []).map(u => `ü•∑üèª ‚îá @${u.split('@')[0]}`).join('\n') || '‚Äî'}
`.trim();

  const buttons = [
    { buttonId: 'escuadra', buttonText: { displayText: 'Escuadra' }, type: 1 },
    { buttonId: 'suplente', buttonText: { displayText: 'Suplente' }, type: 1 }
  ];

  await conn.sendMessage(m.chat, { text: message, buttons, headerType: 1 });
};

// Handler para interacci√≥n de botones
handler.before = async (m, { conn }) => {
  if (!m.isGroup) return; // Solo grupos

  const id = m.id || m.key.id;
  if (!m.message?.buttonsResponseMessage) return;

  const selected = m.message.buttonsResponseMessage.selectedButtonId;
  const userId = m.sender;

  const chatId = m.chat;

  if (selected === 'escuadra') {
    escuadrasPorChat[chatId] = escuadrasPorChat[chatId] || [];
    // Evitar duplicados
    if (!escuadrasPorChat[chatId].includes(userId)) {
      escuadrasPorChat[chatId].push(userId);
      // Tambi√©n lo removemos de suplentes si estaba
      if (suplentesPorChat[chatId]) {
        suplentesPorChat[chatId] = suplentesPorChat[chatId].filter(u => u !== userId);
      }
      await conn.sendMessage(chatId, `‚úÖ @${userId.split('@')[0]} ha sido a√±adido a la ESCUADRA.`, { mentions: [userId] });
    } else {
      await conn.sendMessage(chatId, `‚ö†Ô∏è @${userId.split('@')[0]} ya est√° en la ESCUADRA.`, { mentions: [userId] });
    }
  } else if (selected === 'suplente') {
    suplentesPorChat[chatId] = suplentesPorChat[chatId] || [];
    if (!suplentesPorChat[chatId].includes(userId)) {
      suplentesPorChat[chatId].push(userId);
      // Lo removemos de escuadra si estaba
      if (escuadrasPorChat[chatId]) {
        escuadrasPorChat[chatId] = escuadrasPorChat[chatId].filter(u => u !== userId);
      }
      await conn.sendMessage(chatId, `‚úÖ @${userId.split('@')[0]} ha sido a√±adido a los SUPLENTES.`, { mentions: [userId] });
    } else {
      await conn.sendMessage(chatId, `‚ö†Ô∏è @${userId.split('@')[0]} ya est√° en los SUPLENTES.`, { mentions: [userId] });
    }
  }
};

handler.help = ['4vs4 <hora> <pais>'];
handler.tags = ['freefire'];
handler.command = /^(4vs4|vs4)$/i;

export default handler;