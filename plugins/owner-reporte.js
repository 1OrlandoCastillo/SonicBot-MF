let handler = async (m, { conn, text, usedPrefix, command }) => {
    if (!text) throw '‚ö† *_Ingrese el error que desea reportar._*'
    if (text.length < 10) throw '‚ö†Ô∏è *_Especifique bien el error, m√≠nimo 10 caracteres._*'
    if (text.length > 1000) throw '‚ö†Ô∏è *_M√°ximo 1000 caracteres para enviar el error._*'

    const teks = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ‚ä∑„Äò *R E P O R T E* üå† „Äô‚ä∑
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ‚Åñüß°Íô∞  *Cliente:*
‚îÇ‚úèÔ∏è Wa.me/${m.sender.split`@`[0]}
‚îÇ
‚îÇ‚ÅñüíöÍô∞  *Mensaje:*
‚îÇüì© ${text}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`

    let quotedText = m.quoted && m.quoted.text ? `\n\n*Mensaje citado:*\n${m.quoted.text}` : ''

    // Detecta y env√≠a el reporte a todos los owners definidos en global.owner
    let owners = global.owner.map(o => Array.isArray(o) ? o[0] : o) // soporta formatos ['numero','nombre']
    for (let num of owners) {
        let jid = num + '@s.whatsapp.net'
        await conn.reply(
            jid,
            teks + quotedText,
            m,
            typeof conn.parseMention === 'function' ? { mentions: conn.parseMention(teks) } : {}
        )
    }

    m.reply('‚ö†Ô∏è *_El reporte se envi√≥ a mis creadores, cualquier informe falso puede ocasionar baneo._*')
}

handler.help = ['reportar']
handler.tags = ['info']
handler.command = /^(reporte|report|reportar|bug|error)$/i
handler.estrellas = 2

export default handler